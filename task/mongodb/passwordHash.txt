1.  npm i bcrypt
2. npm i --save-dev @types/bcrypt
3.bcrypt_salt_round: process.env.BCRYPT_SALT_ROUNDS,   
4. BCRYPT_SALT_ROUNDS=12

5.  [       //pre hook middleware
productSchema.pre('save', async function () {
  console.log(this, 'pre hook: WE will save data');
  // eslint-disable-next-line @typescript-eslint/no-this-alias
  const user = this;
  user.password = await bcrypt.hash(
    user.password,
    Number(config.bcrypt_salt_round),
  );
});

//post hook middleware
productSchema.post('save', function () {
  console.log(this, 'post hook, we save data');
});        ---------------]



===============
const productSchema = new Schema<TProduct, TYPProductModel>({
    id: {
      type: String,
      required: [true, 'ID is required'],
      // unique: true,
    },
    password: {
      type: String,
      required: [true, 'AZIR, here need password'],
      maxlength: [20, 'Password can not be more than 20 characters !'],
    },
    name: {
      type: String,
      required: [true, 'hey Azir,  Name is required'],
    },
    description: {
      type: String,
      required: [true, 'Description is required'],
    },
    price: {
      type: Number,
    },
    category: {
      type: String,
      required: [true, 'Category is required'],
    },
  
    tags: {
      type: [String],
      required: [true, 'Tags is required'],
    },
  
    variants: {
      type: [variantSchema],
      required: true,
    },
  
    inventory: {
      type: [inventorySchema],
    },
  
    isDeleted: {
      type: Boolean,
      default: false,
    },
    viewCount: {
      type: Number,
      default: 0,
    },
  });
  // static method
  productSchema.statics.isUserExists = async function (id: string) {
    const existingUser = await ProductModel.findOne({ id });
    return existingUser;
  };
  
  //pre hook middleware
  productSchema.pre('save', async function (next) {
    console.log(this, 'pre hook: WE will save data');
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const user = this;
    user.password = await bcrypt.hash(
      user.password,
      Number(config.bcrypt_salt_round),
    );
    next();
  });
  
  //post hook middleware
  productSchema.post('save', function (doc, next) {
    doc.password = '';
    // console.log(this, 'post hook, we save data');
    next();
  });
  
  export const ProductModel = model<TProduct, TYPProductModel>(
    'Product',
    productSchema,
  );
  